package ArtOfSecurity;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletResponse;

/* Created By Nick Stone on 2/2/2020
 * 
 * MODULE COMMENTS: 
 * This module is designed to be implemented by pre-existing Legacy web applications that run on JSP or other older Java Web Frameworks
 * This Package aims to resolve and defend against several security vulnerabilities and exploit attacks. 
 * 
 * We currently defend against: 
 * Contact Nick Stone to work on this open source project
 * */



public class SecurityInDetail 
{

	
    private static final String[] blockTags = {
            "html", "head", "body", "frameset", "script", "noscript", "style", "meta", "link", "title", "frame",
            "noframes", "section", "nav", "aside", "hgroup", "header", "footer", "p", "h1", "h2", "h3", "h4", "h5", "h6",
            "ul", "ol", "pre", "div", "blockquote", "hr", "address", "figure", "figcaption", "form", "fieldset", "ins",
            "del", "dl", "dt", "dd", "li", "table", "caption", "thead", "tfoot", "tbody", "colgroup", "col", "tr", "th",
            "td", "video", "audio", "canvas", "details", "menu", "plaintext", "template", "article", "main",
            "svg", "math", "center"
    };
    private static final String[] inlineTags = {
            "object", "base", "font", "tt", "i", "b", "u", "big", "small", "em", "strong", "dfn", "code", "samp", "kbd",
            "var", "cite", "abbr", "time", "acronym", "mark", "ruby", "rt", "rp", "a", "img", "br", "wbr", "map", "q",
            "sub", "sup", "bdo", "iframe", "embed", "span", "input", "select", "textarea", "label", "button", "optgroup",
            "option", "legend", "datalist", "keygen", "output", "progress", "meter", "area", "param", "source", "track",
            "summary", "command", "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track",
            "data", "bdi", "s"
    };
    private static final String[] emptyTags = {
            "meta", "link", "base", "frame", "img", "br", "wbr", "embed", "hr", "input", "keygen", "col", "command",
            "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track"
    };
  
    private static final String[] formatAsInlineTags = {
            "title", "a", "p", "h1", "h2", "h3", "h4", "h5", "h6", "pre", "address", "li", "th", "td", "script", "style",
            "ins", "del", "s"
    };
    private static final String[] preserveWhitespaceTags = {
            "pre", "plaintext", "title", "textarea"
    };
    private static final String[] formListedTags = {
            "button", "fieldset", "input", "keygen", "object", "output", "select", "textarea"
    };
    private static final String[] formSubmitTags = {
            "input", "keygen", "object", "select", "textarea"
    };
	//Two methods that branch and combine methods together
	//One for queries and one for non queries
	
	
	
	//Create a parsing method 
	
	//XSS
	
	private static String CrossSiteFilter() {
		
		
		return ""; 
		
	}
	
	//SQLInjection

	private static String parseSQL(String sql) {
		String aa = sql; 
		
		//Parse all of the SQL commands out of the String.
		
		
		
		//Then Implement a Secure injection
		
		
		return aa; 
	}
	
	
	//JavaScript Injection
	
	public static String parsejavascript(String sanitize) {
		//Write a Regular Expression to parse out all <Script> Tags!
		String bb = sanitize; 
	
		ArrayList<String> gs = new ArrayList<String>(); 
		//Parse all the java script tags
		//TODO Turn this into a regular expression
		
		//Block Tags Permutated
		for(int i = 0; i < blockTags.length; i++) {
			
			gs = permutations(blockTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
		//Script
		gs = permutations("<script>"); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
		gs = permutations("</script>"); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
		for(int i = 0; i < inlineTags.length; i++) {
			
			gs = permutations(inlineTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
		for(int i = 0; i < emptyTags.length; i++) {
			
			gs = permutations(emptyTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
		for(int i = 0; i < formatAsInlineTags.length; i++) {
			
			gs = permutations(formatAsInlineTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
		for(int i = 0; i < preserveWhitespaceTags.length; i++) {
			
			gs = permutations(preserveWhitespaceTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
	for(int i = 0; i < formListedTags.length; i++) {
			
			gs = permutations(formListedTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
	for(int i = 0; i < formSubmitTags.length; i++) {
		
		gs = permutations(formSubmitTags[i]); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
	}
		
		
		/*
		bb = bb.replaceAll("<script>", "");
		bb = bb.replaceAll("</script>", "");
		bb = bb.replaceAll("<Script>", "");
		bb = bb.replaceAll("</Script>", "");
		*/
		//Replace all special characters
		bb = bb.replaceAll("[@,#,$,%,^,&,*,<,>,/,',:,;']", "");
		
		
		
		return bb; 
	}
	
	//Cookies to stop Brute Force Log In Attack
	private static void CookieLogs() {
		
		
	}
	
	//Cookies to stop Port SCan? 
	private static void portscan() {
	
	
	}
	 static ArrayList<String> permutations(String attack) 
	    { 
		 	ArrayList<String> t = new ArrayList(); 
	        int lengthstring = attack.length();
	        double max = Math.pow(2, lengthstring); 
	        attack = attack.toLowerCase();  
	        for(int i = 0;i < max; i++) 
	        { 
	            char stri[] = attack.toCharArray(); 
	            for(int j = 0; j < lengthstring; j++) 
	            { 
	                if(((i >> j) &  1) == 1) 
	                {
	                    stri[j] = (char) (stri[j]-32); 
	                }
	                
	            }  
	            //System.out.println(stri); 
	            String fsd = String.valueOf(stri); 
	            t.add(fsd);   
	            
	        } 
	        return t; 
	    } 
	
	public static void init() {
		
		
	}
	

	
	
}
