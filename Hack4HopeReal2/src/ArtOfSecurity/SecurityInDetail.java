package ArtOfSecurity;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.servlet.http.HttpServletResponse;

import com.mysql.jdbc.Statement;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;


/* Created By Nick Stone on 2/2/2020
 * 
 * MODULE COMMENTS: 
 * This module is designed to be implemented by pre-existing Legacy web applications that run on JSP or other older Java Web Frameworks
 * This Package aims to resolve and defend against several security vulnerabilities and exploit attacks. 
 * 
 * We currently defend against: 
 * Contact Nick Stone to work on this open source project
 * */



public class SecurityInDetail 
{

	
    private static final String[] blockTags = {
            "html", "head", "body", "frameset", "script", "noscript", "style", "meta", "link", "title", "frame",
            "noframes", "section", "nav", "aside", "hgroup", "header", "footer", "h1", "h2", "h3", "h4", "h5", "h6",
             "pre", "div", "blockquote", "hr", "address", "figure", "figcaption", "form", "fieldset", 
            "del", "dl", "dt", "dd", "table", "caption", "thead", "tfoot", "tbody", "colgroup", "col",
            "td", "video", "audio", "canvas", "details",  "plaintext", "template", "article", 
            "svg"
    };
    private static final String[] inlineTags = {
            "object", "base", "font", "tt", "big", "small", "em", "strong", "dfn", "code", "samp", "kbd",
            "var", "cite", "abbr", "time", "acronym", "mark", "ruby", "rt", "rp",  "img",  "wbr", "map",
            "sub", "sup", "bdo", "iframe", "embed", "span", "input", "select", "textarea", "label", "button", "optgroup",
            "option", "legend", "datalist", "keygen", "output", "progress", "meter", "area", "param", "source", "track",
            "summary", "command", "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track",
            "data", "bdi"
    };
    private static final String[] emptyTags = {
            "meta", "link", "base", "frame", "img", "wbr", "embed", "hr", "input", "keygen", "command",
            "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track"
    };
  
  
    private static final String[] formSubmitTags = {
            "input", "keygen", "object", "select", "textarea"
    };
	//Two methods that branch and combine methods together
	//One for queries and one for non queries
	private static final String[] sqlinje = {
		"select","union", "where", "or", "and", "group", "schema", "table", "alter", "as", "avg","between",
		"case","count","create","delete","group","by", "having","inner","join","outer","insert","null",
		"like","limit", "distinct", "update","with","from"
	}; 
	
	
	//Create a parsing method 

	//SQLInjection

	//This is a SQL Injection Prevention Method
	//Need to Document and Revisit to Refactor:
	public static String parses(String sql) {
		String aa = sql; 
		//String stringtoparse = ""; 
		aa = aa.replaceAll("[@,#,$,%,^,&,*,<,>,/,',:,;',=,+,-]", "");
		aa.toLowerCase();
		//Parse the commands to 
		ArrayList<String> perm = new ArrayList();
		for(int i = 0; i < sqlinje.length; i++) {
				perm = permutations(sqlinje[i]); 
				for(int j = 0; j < perm.size(); j++) {
					String s = perm.get(j); 
					//System.out.println(s);
					aa = aa.replaceAll(s,""); 
				}
			}
		
		
		//Parse all of the SQL commands out of the String.
		
		
		
		//Then Implement a Secure injection
		
		//System.out.println(aa); 
		return aa; 
	}
	
	
	//JavaScript Injection
	
	public static String parsejavascript(String sanitize) {
		//Write a Regular Expression to parse out all <Script> Tags!
		String bb = sanitize; 
	
		ArrayList<String> gs = new ArrayList<String>(); 
		//Parse all the java script tags
		//TODO Turn this into a regular expression
		
		//Block Tags Permutated
		for(int i = 0; i < blockTags.length; i++) {
			
			gs = permutations(blockTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
			}
		}
		//Script
		gs = permutations("<script>"); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
		gs = permutations("</script>"); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
		for(int i = 0; i < inlineTags.length; i++) {
			
			gs = permutations(inlineTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
		for(int i = 0; i < emptyTags.length; i++) {
			
			gs = permutations(emptyTags[i]); 
			for(int j = 0; j < gs.size(); j++) {
				String s = gs.get(j); 
				//System.out.println(s);
				bb = bb.replaceAll(s,""); 
				
			}
		}
	for(int i = 0; i < formSubmitTags.length; i++) {
		
		gs = permutations(formSubmitTags[i]); 
		for(int j = 0; j < gs.size(); j++) {
			String s = gs.get(j); 
			//System.out.println(s);
			bb = bb.replaceAll(s,""); 
			
		}
	}
		
		
		/*
		bb = bb.replaceAll("<script>", "");
		bb = bb.replaceAll("</script>", "");
		bb = bb.replaceAll("<Script>", "");
		bb = bb.replaceAll("</Script>", "");
		*/
		//Replace all special characters
		bb = bb.replaceAll("[@,#,$,%,^,&,*,<,>,/,',:,;']", "");
		
		
		
		return bb; 
	}
	
	//Cookies to stop Brute Force Log In Attack
	private static void CookieLogs() {
		
		
	}
	
	//Cookies to stop Port SCan? 
	private static void portscan() {
	
	
	}
	 static ArrayList<String> permutations(String attack) 
	    { 
		 	ArrayList<String> t = new ArrayList(); 
	        int lengthstring = attack.length();
	        double max = Math.pow(2, lengthstring); 
	        attack = attack.toLowerCase();  
	        int i = 0; 
	        while(i < max){
	            char stri[] = attack.toCharArray(); 
	            int j = 0; 
	            while(j < lengthstring){
	                if(((i >> j) &  1) == 1) 
	                {
	                    stri[j] = (char) (stri[j]-32); 
	                }
	                j++; 
	            }  
	            //System.out.println(stri); 
	            String fsd = String.valueOf(stri); 
	            t.add(fsd);   
	            i++;
	            continue; 
	        } 
	        return t; 
	    } 
	
	 
	 //On Initialization what should we do? make a cookie? 
	public static void init() {
		
		
	}
	
		//Testing
	public static void NetworkError(HttpServletResponse response) throws IOException {
		
		try {
			int s = response.getStatus(); 
			if(s > 200) {
				//Not ok
				response.sendRedirect("FileNotFound.jsp");
				//return false; 
			}
		
		}
		catch(Exception e){
			response.sendRedirect("FileNotFound.jsp");
		}
		//Ok
		//return true; 
		
		
	}
	
	//Log an entry?
	public static void Log(HttpServletResponse s)throws IOException {
		
		
		
	}
		
	//Change to SHA 256
	public static void UpdateHashAll(String hash){
		Connection conn;
		conn = null;
		try {
		//DB parameters
		String url       = "jdbc:mysql://127.0.0.1:3306/eogotwa_h4hProject";
		String user      = "root";
		String password  = "Infosafe1";
	   
	    //create a connection to the database
	    conn = DriverManager.getConnection(url, user, password);
		java.sql.Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT username, password from users"); 
		while(rs.next())
		{
			String Username = rs.getString("username"); 	 
			String unhashpassword = rs.getString("Password"); 
			unhashpassword = encryptSHA256(unhashpassword); 
			//Rehash password
			//Insert back into users
			//Query to update the Query
			String sql = "UPDATE users SET password = '"+unhashpassword+"' where username = '"+Username+"'";
			PreparedStatement preparedInsert = conn.prepareStatement(sql);
			preparedInsert.execute(sql);

		}	    
		}
		catch(Exception e){
			System.out.println("An Error has occurerd"); 
			
		}
		
	    
	    
		
	}
	//
	private static boolean NewAuthenitcation256(String username, String pass)
	{
	//Create a Connection to the Database
		Connection conn;
		conn = null;
		try {
		//DB parameters
		String url       = "jdbc:mysql://127.0.0.1:3306/eogotwa_h4hProject";
		String user      = "root";
		String password  = "Infosafe1";
	   
	    //create a connection to the database
	    conn = DriverManager.getConnection(url, user, password);
		java.sql.Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT password from users where username = " + username); 
		String unhash = rs.getString("password"); 
		//Hash the password to SHA256
		pass = encryptSHA256(pass); 
		//Compare this new generated hash with the hash stored in the database]
		if(pass == unhash){
			return true; 

		}
		return false; 
		}
		catch(Exception e){
			System.out.println("THe error that was thrown is " + e); 
		}



		return false; 
	}
	
	private static boolean NewAuthenticationsha1(String username, String pass)
	{
		//Create a Connection to the Database
		Connection conn;
		conn = null;
		try {
		//DB parameters
		String url       = "jdbc:mysql://127.0.0.1:3306/eogotwa_h4hProject";
		String user      = "root";
		String password  = "Infosafe1";
	   
	    //create a connection to the database
	    conn = DriverManager.getConnection(url, user, password);
		java.sql.Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT password from users where username = " + username); 
		String unhash = rs.getString("password"); 
		//Hash the password to MD5
		pass = encryptSHA1(pass); 
		//Hash the password to SHA256
		pass = encryptSHA256(pass); 
		//Compare this new generated hash with the hash stored in the database]
		if(pass == unhash){
			return true; 

		}
		return false; 

		}
		catch(Exception e){
			System.out.println("THe error that was thrown is " + e); 
		}




		return false; 
	}

	private static boolean NewAuthenticationmd5(String username,String pass)
	{
		//Create a Connection to the Database
		Connection conn;
		conn = null;
		try {
		//DB parameters
		String url       = "jdbc:mysql://127.0.0.1:3306/eogotwa_h4hProject";
		String user      = "root";
		String password  = "Infosafe1";
	   
	    //create a connection to the database
	    conn = DriverManager.getConnection(url, user, password);
		java.sql.Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT password from users where username = " + username); 
		String unhash = rs.getString("password"); 
		//Hash the password to MD5
		pass = encryptMD5(pass); 
		//Hash the password to SHA256
		pass = encryptSHA256(pass); 
		//Compare this new generated hash with the hash stored in the database]
		if(pass == unhash){
			return true; 

		}
		return false; 

		}
		catch(Exception e){
			System.out.println("THe error that was thrown is " + e); 
		}
		return false; 

	
	}

	//Method to move all of the Personal Information into a new table as well as encryption method for viewing the data
	private static void PersonalInformationDB(){
		
	}
	
	//Accessing the Perosnal information that we created in the DB
	private static void AccessingPI(){
		
		
	}

	private static void updatehashreplace(String passTo, String username)
	{
		Connection conn;
		conn = null;
		try {
		//DB parameters
		String url       = "jdbc:mysql://127.0.0.1:3306/eogotwa_h4hProject";
		String user      = "root";
		String password  = "Infosafe1";
	   
	    //create a connection to the database
	    conn = DriverManager.getConnection(url, user, password);

		passTo = encryptSHA256(passTo); 
		String sql = "UPDATE users SET password = '"+passTo+"' where username = '"+username+"'";
		PreparedStatement preparedInsert = conn.prepareStatement(sql);
		preparedInsert.execute(sql);
		}
		catch(Exception e){
			System.out.println("THe error that was thrown is " + e); 
		}



	}
	
	//Encrypt a String with 256
	public static String encryptSHA256(String needencrypt) throws NoSuchAlgorithmException
	{
		String NewHashed = ""; 
		 MessageDigest md = MessageDigest.getInstance("SHA-256");
         byte[] bytes = md.digest(needencrypt.getBytes());
         StringBuilder sb = new StringBuilder();
         for(int i=0; i< bytes.length ;i++)
         {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
         }
        NewHashed = sb.toString();
		return NewHashed; 
		
	}
	//Encrypt a String with SHA1
	public static String encryptSHA1(String needencrypt) throws NoSuchAlgorithmException{
		 String NewHashed = ""; 
		 MessageDigest md = MessageDigest.getInstance("SHA-1");
         byte[] bytes = md.digest(needencrypt.getBytes());
         StringBuilder sb = new StringBuilder();
         for(int i=0; i< bytes.length ;i++)
         {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
         }
        NewHashed = sb.toString();
		return NewHashed; 

		
	}
	//Encrypt a String with MD5
	public static String encryptMD5(String needencrypt) throws NoSuchAlgorithmException{
		String NewHashed = ""; 
		 MessageDigest md = MessageDigest.getInstance("MD-5");
         byte[] bytes = md.digest(needencrypt.getBytes());
         StringBuilder sb = new StringBuilder();
         for(int i=0; i< bytes.length ;i++)
         {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
         }
        NewHashed = sb.toString();
		return NewHashed; 		
	}



	
}
