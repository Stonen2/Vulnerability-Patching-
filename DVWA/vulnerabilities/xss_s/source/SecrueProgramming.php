<?php
//Created by Nick Stone 
//Secure progamming to parse user input to detect and defend SQL injection XSS and JS injection


//echo "Hello World"; 
//For now we are just going to print the string to the page to get used to php
function javascriptparse($String_To_Parse){
    //Parse some evil stuff right off the bat 
    //$String_To_Parse = preg_replace("/@///%/^/&/*/</>//:/;/]", "",$String_To_Parse); 
    //[@,#,$,%,^,&,*,<,>,/,',:,;']
    //$String_To_Parse = preg_replace("///", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/@/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/#/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/$/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/%/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/^/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/&/", "",$String_To_Parse); 
   // $String_To_Parse = preg_replace("/*/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/</", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/>/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/'/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/:/", "",$String_To_Parse); 
    $String_To_Parse = preg_replace("/;/","",$String_To_Parse); 
    //Make and populate an array with every possible Tag that could be used to hurt us'
    $tags = array(); 
    array_push($tags, "html", "head", "body", "frameset", "script", "noscript", "style", "meta", "link", "title", "frame",
    "noframes", "section", "nav", "aside", "hgroup", "header", "footer", "h1", "h2", "h3", "h4", "h5", "h6",
     "pre", "div", "blockquote", "hr", "address", "figure", "figcaption", "form", "fieldset", 
    "del", "dl", "dt", "dd", "table", "caption", "thead", "tfoot", "tbody", "colgroup", "col",
    "td", "video", "audio", "canvas", "details",  "plaintext", "template", "article", 
    "svg", "object", "base", "font", "tt", "big", "small", "em", "strong", "dfn", "code", "samp", "kbd",
    "var", "cite", "abbr", "time", "acronym", "mark", "ruby", "rt", "rp",  "img",  "wbr", "map",
    "sub", "sup", "bdo", "iframe", "embed", "span", "input", "select", "textarea", "label", "button", "optgroup",
    "option", "legend", "datalist", "keygen", "output", "progress", "meter", "area", "param", "source", "track",
    "summary", "command", "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track",
    "data", "bdi","meta", "link", "base", "frame", "img", "wbr", "embed", "hr", "input", "keygen", "command",
    "device", "area", "basefont", "bgsound", "menuitem", "param", "source", "track", "input", "keygen", "object", "select", "textarea");


    //Lets set up the parsing now 

foreach($tags as $Tag_parse){


    //echo $String_To_Parse; 
    $Holdup = permutations($Tag_parse); 
    foreach($Holdup as $Newpermut)
    {
        $tos = '/'; 
        $tos .= $Newpermut; 
        $tos .= '/'; 
    
    //echo $Newpermut; 
    $String_To_Parse = preg_replace($tos, "",$String_To_Parse); 
    
    }
    // echo "This is a test of a function call"; 

}

    // echo $Holdup[1]; 
    /*
    Following code is example code for PHP regular expression find and replace!
$string = 'The quick brown fox jumps over the lazy dog.';
$patterns = array();
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
$replacements = array();
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo preg_replace($patterns, $replacements, $string);   


preg_replace(RegularExpression, Replacement Text, String to parse)
    */

    return $String_To_Parse; 

}

function permutations($input) 
{ 
    //echo "Here"; 
    $permutation_Array = array();  
    //echo "Here"; 
    $length = strlen($input); 
    //echo "Here"; 
    // Number of permutations is 2^n 
    $max = pow(2,$length); 
    //echo "Here"; 
    // Converting string to lower case 
    $input = strtolower($input); 
    //echo "Here"; 
    // Using all subsequences and permuting them 
    for($i = 0; $i < $max; $i++) 
    { 
        
        $combination = $input; 
        // If j-th bit is set, we convert  
        // it to upper case 
        for($j = 0; $j < $n; $j++) 
        { 
            if((($i >> $j) & 1) == 1) 
                $combination[$j] = chr(ord($combination[$j]) - 32); 

        } 
        array_push($permutation_Array,$combination); 
    
    } 

    return $permutation_Array; 

} 




function SqlInjectionParse($String_To_Parse){


    return $String_To_Parse; 


}


/*

Some form of Log in the dection of INjection Attacks!

*/



?>
