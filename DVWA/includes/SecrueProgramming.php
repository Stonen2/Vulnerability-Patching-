<?php
//Created by Nick Stone 
//Secure progamming to parse user input to detect and defend SQL injection XSS and JS injection



//For now we are just going to print the string to the page to get used to php
function javascriptparse($String_To_Parse){


    //echo $String_To_Parse; 
    $Holdup = permuations("<script>"); 
    $String_To_Parse = preg_replace($Holdup[0], "",$String_To_Parse); 
   
    // echo $Holdup[1]; 
    /*
    Following code is example code for PHP regular expression find and replace!
$string = 'The quick brown fox jumps over the lazy dog.';
$patterns = array();
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
$replacements = array();
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo preg_replace($patterns, $replacements, $string);   


preg_replace(RegularExpression, Replacement Text, String to parse)
    */

    return $String_To_Parse; 

}

function permutations($input) 
{ 

    $permutation_Array = array();  
    $length = strlen($input); 
    // Number of permutations is 2^n 
    $max = pow(2,$length); 
    // Converting string to lower case 
    $input = strtolower($input); 
    // Using all subsequences and permuting them 
    for($i = 0; $i < $max; $i++) 
    { 
        $combination = $input; 
        // If j-th bit is set, we convert  
        // it to upper case 
        for($j = 0; $j < $n; $j++) 
        { 
            if((($i >> $j) & 1) == 1) 
                $combination[$j] = chr(ord($combination[$j]) - 32); 

        } 
        $permutation_Array.add(combination); 
    
    } 

    return $permutation_Array; 

} 




function SqlInjectionParse($String_To_Parse){


    return $String_To_Parse; 


}


/*

Some form of Log in the dection of INjection Attacks!

*/



?>
